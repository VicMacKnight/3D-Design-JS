{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/ImplicitFunction.js", "../../@kitware/vtk.js/Common/DataModel/Plane.js"],
  "sourcesContent": ["import { m as macro } from '../../macros2.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkImplicitFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImplicitFunction(publicAPI, model) {\n  model.classHierarchy.push('vtkImplicitFunction');\n  publicAPI.functionValue = xyz => {\n    if (!model.transform) {\n      return publicAPI.evaluateFunction(xyz);\n    }\n    const transformedXYZ = [];\n    model.transform.transformPoint(xyz, transformedXYZ);\n    return publicAPI.evaluateFunction(transformedXYZ);\n  };\n  publicAPI.evaluateFunction = _xyz => {\n    macro.vtkErrorMacro('not implemented');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\nconst DEFAULT_VALUES = {\n  // transform : null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['transform']);\n  vtkImplicitFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImplicitFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImplicitFunction$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImplicitFunction$1 as default, extend, newInstance };\n", "import { s as subtract, d as dot, j as cross, k as add } from '../Core/Math/index.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkImplicitFunction from './ImplicitFunction.js';\n\nconst PLANE_TOLERANCE = 1.0e-6;\nconst COINCIDE = 'coincide';\nconst DISJOINT = 'disjoint';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction evaluate(normal, origin, x) {\n  return normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n}\nfunction distanceToPlane(x, origin, normal) {\n  const distance = normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n  return Math.abs(distance);\n}\nfunction projectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  subtract(x, origin, xo);\n  const t = dot(normal, xo);\n  xproj[0] = x[0] - t * normal[0];\n  xproj[1] = x[1] - t * normal[1];\n  xproj[2] = x[2] - t * normal[2];\n}\nfunction projectVector(v, normal, vproj) {\n  const t = dot(v, normal);\n  let n2 = dot(normal, normal);\n  if (n2 === 0) {\n    n2 = 1.0;\n  }\n  vproj[0] = v[0] - t * normal[0] / n2;\n  vproj[1] = v[1] - t * normal[1] / n2;\n  vproj[2] = v[2] - t * normal[2] / n2;\n  return vproj;\n}\nfunction generalizedProjectPoint(x, origin, normal, xproj) {\n  const xo = [];\n  subtract(x, origin, xo);\n  const t = dot(normal, xo);\n  const n2 = dot(normal, normal);\n  if (n2 !== 0) {\n    xproj[0] = x[0] - t * normal[0] / n2;\n    xproj[1] = x[1] - t * normal[1] / n2;\n    xproj[2] = x[2] - t * normal[2] / n2;\n  } else {\n    xproj[0] = x[0];\n    xproj[1] = x[1];\n    xproj[2] = x[2];\n  }\n}\nfunction intersectWithLine(p1, p2, origin, normal) {\n  const outObj = {\n    intersection: false,\n    betweenPoints: false,\n    t: Number.MAX_VALUE,\n    x: []\n  };\n  const p21 = [];\n  const p1Origin = [];\n  // Compute line vector\n  subtract(p2, p1, p21);\n  subtract(origin, p1, p1Origin);\n\n  // Compute denominator.  If ~0, line and plane are parallel.\n  // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);\n  const num = dot(normal, p1Origin);\n  const den = dot(normal, p21);\n\n  // If denominator with respect to numerator is \"zero\", then the line and\n  // plane are considered parallel.\n  let fabsden;\n  let fabstolerance;\n\n  // Trying to avoid an expensive call to fabs()\n  if (den < 0.0) {\n    fabsden = -den;\n  } else {\n    fabsden = den;\n  }\n  if (num < 0.0) {\n    fabstolerance = -num * PLANE_TOLERANCE;\n  } else {\n    fabstolerance = num * PLANE_TOLERANCE;\n  }\n  if (fabsden <= fabstolerance) {\n    return outObj;\n  }\n\n  // Where on the line between p1 and p2 is the intersection\n  // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2\n  outObj.t = num / den;\n  outObj.x[0] = p1[0] + outObj.t * p21[0];\n  outObj.x[1] = p1[1] + outObj.t * p21[1];\n  outObj.x[2] = p1[2] + outObj.t * p21[2];\n  outObj.intersection = true;\n  outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;\n  return outObj;\n}\nfunction intersectWithPlane(plane1Origin, plane1Normal, plane2Origin, plane2Normal) {\n  const outObj = {\n    intersection: false,\n    l0: [],\n    l1: [],\n    error: null\n  };\n  const cross$1 = [];\n  cross(plane1Normal, plane2Normal, cross$1);\n  const absCross = cross$1.map(n => Math.abs(n));\n\n  // test if the two planes are parallel\n  if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {\n    // test if disjoint or coincide\n    const v = [];\n    subtract(plane1Origin, plane2Origin, v);\n    if (dot(plane1Normal, v) === 0) {\n      outObj.error = COINCIDE;\n    } else {\n      outObj.error = DISJOINT;\n    }\n    return outObj;\n  }\n\n  // Plane1 and Plane2 intersect in a line\n  // first determine max abs coordinate of the cross product\n  let maxc;\n  if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {\n    maxc = 'x';\n  } else if (absCross[1] > absCross[2]) {\n    maxc = 'y';\n  } else {\n    maxc = 'z';\n  }\n\n  // To get a point on the intersect line, zero the max coord, and solve for the other two\n  const iP = []; // intersectionPoint\n  // the constants in the 2 plane equations\n  const d1 = -dot(plane1Normal, plane1Origin);\n  const d2 = -dot(plane2Normal, plane2Origin);\n\n  // eslint-disable-next-line default-case\n  switch (maxc) {\n    case 'x':\n      // intersect with x=0\n      iP[0] = 0;\n      iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross$1[0];\n      iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross$1[0];\n      break;\n    case 'y':\n      // intersect with y=0\n      iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross$1[1];\n      iP[1] = 0;\n      iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross$1[1];\n      break;\n    case 'z':\n      // intersect with z=0\n      iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross$1[2];\n      iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross$1[2];\n      iP[2] = 0;\n      break;\n  }\n  outObj.l0 = iP;\n  add(iP, cross$1, outObj.l1);\n  outObj.intersection = true;\n  return outObj;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  evaluate,\n  distanceToPlane,\n  projectPoint,\n  projectVector,\n  generalizedProjectPoint,\n  intersectWithLine,\n  intersectWithPlane,\n  DISJOINT,\n  COINCIDE\n};\n\n// ----------------------------------------------------------------------------\n// vtkPlane methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPlane(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPlane');\n  publicAPI.distanceToPlane = x => distanceToPlane(x, model.origin, model.normal);\n  publicAPI.projectPoint = (x, xproj) => {\n    projectPoint(x, model.origin, model.normal, xproj);\n  };\n  publicAPI.projectVector = (v, vproj) => projectVector(v, model.normal, vproj);\n  publicAPI.push = distance => {\n    if (distance === 0.0) {\n      return;\n    }\n    for (let i = 0; i < 3; i++) {\n      model.origin[i] += distance * model.normal[i];\n    }\n  };\n  publicAPI.generalizedProjectPoint = (x, xproj) => {\n    generalizedProjectPoint(x, model.origin, model.normal, xproj);\n  };\n  publicAPI.evaluateFunction = (x, y, z) => {\n    if (!Array.isArray(x)) {\n      return model.normal[0] * (x - model.origin[0]) + model.normal[1] * (y - model.origin[1]) + model.normal[2] * (z - model.origin[2]);\n    }\n    return model.normal[0] * (x[0] - model.origin[0]) + model.normal[1] * (x[1] - model.origin[1]) + model.normal[2] * (x[2] - model.origin[2]);\n  };\n  publicAPI.evaluateGradient = xyz => {\n    const retVal = [model.normal[0], model.normal[1], model.normal[2]];\n    return retVal;\n  };\n  publicAPI.intersectWithLine = (p1, p2) => intersectWithLine(p1, p2, model.origin, model.normal);\n  publicAPI.intersectWithPlane = (planeOrigin, planeNormal) => intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  normal: [0.0, 0.0, 1.0],\n  origin: [0.0, 0.0, 0.0]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  vtkImplicitFunction.extend(publicAPI, model, initialValues);\n  macro.setGetArray(publicAPI, model, ['normal', 'origin'], 3);\n  vtkPlane(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkPlane');\n\n// ----------------------------------------------------------------------------\n\nvar vtkPlane$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkPlane$1 as default, extend, newInstance, vtkPlane };\n"],
  "mappings": "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",
  "names": ["DEFAULT_VALUES", "extend", "newInstance"]
}

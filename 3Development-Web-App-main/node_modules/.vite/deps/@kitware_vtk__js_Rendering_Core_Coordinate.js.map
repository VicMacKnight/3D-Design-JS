{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/Core/Coordinate/Constants.js", "../../@kitware/vtk.js/Rendering/Core/Coordinate.js"],
  "sourcesContent": ["const Coordinate = {\n  DISPLAY: 0,\n  NORMALIZED_DISPLAY: 1,\n  VIEWPORT: 2,\n  NORMALIZED_VIEWPORT: 3,\n  PROJECTION: 4,\n  VIEW: 5,\n  WORLD: 6\n};\nvar Constants = {\n  Coordinate\n};\n\nexport { Coordinate, Constants as default };\n", "import { m as macro } from '../../macros2.js';\nimport Constants from './Coordinate/Constants.js';\nimport { P as round, K as floor } from '../../Common/Core/Math/index.js';\n\nconst {\n  Coordinate\n} = Constants;\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCoordinate(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCoordinate');\n  publicAPI.setValue = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let array = args;\n    // allow an array passed as a single arg.\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n    if (array.length === 2) {\n      publicAPI.setValue(array[0], array[1], 0.0);\n      return true;\n    }\n    if (array.length !== 3) {\n      throw new RangeError('Invalid number of values for array setter');\n    }\n    let changeDetected = false;\n    model.value.forEach((item, index) => {\n      if (item !== array[index]) {\n        if (changeDetected) {\n          return;\n        }\n        changeDetected = true;\n      }\n    });\n    if (changeDetected) {\n      model.value = [].concat(array);\n      publicAPI.modified();\n    }\n    return true;\n  };\n  publicAPI.setCoordinateSystemToDisplay = () => {\n    publicAPI.setCoordinateSystem(Coordinate.DISPLAY);\n  };\n  publicAPI.setCoordinateSystemToNormalizedDisplay = () => {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_DISPLAY);\n  };\n  publicAPI.setCoordinateSystemToViewport = () => {\n    publicAPI.setCoordinateSystem(Coordinate.VIEWPORT);\n  };\n  publicAPI.setCoordinateSystemToNormalizedViewport = () => {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_VIEWPORT);\n  };\n  publicAPI.setCoordinateSystemToProjection = () => {\n    publicAPI.setCoordinateSystem(Coordinate.PROJECTION);\n  };\n  publicAPI.setCoordinateSystemToView = () => {\n    publicAPI.setCoordinateSystem(Coordinate.VIEW);\n  };\n  publicAPI.setCoordinateSystemToWorld = () => {\n    publicAPI.setCoordinateSystem(Coordinate.WORLD);\n  };\n  publicAPI.getCoordinateSystemAsString = () => macro.enumToString(Coordinate, model.coordinateSystem);\n  publicAPI.getComputedWorldValue = ren => {\n    let val = model.computedWorldValue;\n    if (model.computing) {\n      return val;\n    }\n    model.computing = 1;\n    val[0] = model.value[0];\n    val[1] = model.value[1];\n    val[2] = model.value[2];\n\n    // Use our renderer if is defined\n    let renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.WORLD) {\n        if (model.referenceCoordinate) {\n          const refValue = model.referenceCoordinate.getComputedWorldValue(renderer);\n          val[0] += refValue[0];\n          val[1] += refValue[1];\n          val[2] += refValue[2];\n        }\n        model.computing = 0;\n      } else {\n        vtkErrorMacro('Attempt to compute world coordinates from another coordinate system without a renderer');\n      }\n      return val;\n    }\n\n    // convert to current coordinate system\n    let view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return model.computedWorldValue;\n    }\n    const dims = view.getViewportSize(renderer);\n    const aspect = dims[0] / dims[1];\n    if (model.referenceCoordinate && model.coordinateSystem !== Coordinate.WORLD) {\n      const fval = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n      let refValue = [fval[0], fval[1], 0.0];\n      switch (model.coordinateSystem) {\n        case Coordinate.NORMALIZED_DISPLAY:\n          refValue = view.displayToNormalizedDisplay(refValue[0], refValue[1], refValue[2]);\n          break;\n        case Coordinate.VIEWPORT:\n          refValue = view.displayToNormalizedDisplay(refValue[0], refValue[1], refValue[2]);\n          refValue = view.normalizedDisplayToViewport(refValue[0], refValue[1], refValue[2], renderer);\n          break;\n        case Coordinate.NORMALIZED_VIEWPORT:\n          refValue = view.displayToNormalizedDisplay(refValue[0], refValue[1], refValue[2]);\n          refValue = view.normalizedDisplayToViewport(refValue[0], refValue[1], refValue[2], renderer);\n          refValue = view.viewportToNormalizedViewport(refValue[0], refValue[1], refValue[2], renderer);\n          break;\n        case Coordinate.PROJECTION:\n          refValue = view.displayToNormalizedDisplay(refValue[0], refValue[1], refValue[2]);\n          refValue = view.normalizedDisplayToViewport(refValue[0], refValue[1], refValue[2], renderer);\n          refValue = view.viewportToNormalizedViewport(refValue[0], refValue[1], refValue[2], renderer);\n          refValue = renderer.normalizedViewportToProjection(refValue[0], refValue[1], refValue[2]);\n          break;\n        case Coordinate.VIEW:\n          refValue = view.displayToNormalizedDisplay(refValue[0], refValue[1], refValue[2]);\n          refValue = view.normalizedDisplayToViewport(refValue[0], refValue[1], refValue[2], renderer);\n          refValue = view.viewportToNormalizedViewport(refValue[0], refValue[1], refValue[2], renderer);\n          refValue = renderer.normalizedViewportToProjection(refValue[0], refValue[1], refValue[2]);\n          refValue = renderer.projectionToView(refValue[0], refValue[1], refValue[2], aspect);\n          break;\n      }\n      val[0] += refValue[0];\n      val[1] += refValue[1];\n      val[2] += refValue[2];\n    }\n    switch (model.coordinateSystem) {\n      case Coordinate.DISPLAY:\n        val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.VIEWPORT:\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.NORMALIZED_VIEWPORT:\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.PROJECTION:\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.VIEW:\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n    }\n    if (model.referenceCoordinate && model.coordinateSystem === Coordinate.WORLD) {\n      const refValue = publicAPI.getComputedWorldValue(renderer);\n      val[0] += refValue[0];\n      val[1] += refValue[1];\n      val[2] += refValue[2];\n    }\n    model.computing = 0;\n    model.computedWorldValue = val.slice(0);\n    return val;\n  };\n  publicAPI.getComputedViewportValue = ren => {\n    const f = publicAPI.getComputedDoubleViewportValue(ren);\n    return [round(f[0]), round(f[1])];\n  };\n  publicAPI.getComputedDisplayValue = ren => {\n    const val = publicAPI.getComputedDoubleDisplayValue(ren);\n    return [floor(val[0]), floor(val[1])];\n  };\n  publicAPI.getComputedLocalDisplayValue = ren => {\n    // Use our renderer if it is defined\n    let renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    let val = publicAPI.getComputedDisplayValue(renderer);\n    if (!renderer) {\n      vtkErrorMacro('Attempt to convert to local display coordinates without a renderer');\n      return val;\n    }\n    let view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    val = view.displayToLocalDisplay(val[0], val[1], val[2]);\n    return [round(val[0]), round(val[1])];\n  };\n  publicAPI.getComputedDoubleViewportValue = ren => {\n    let renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    let val = publicAPI.getComputedDoubleDisplayValue(renderer);\n    if (!renderer) {\n      return val;\n    }\n    let view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n    val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n    return [val[0], val[1]];\n  };\n  publicAPI.getComputedDoubleDisplayValue = ren => {\n    if (model.computing) {\n      return model.computedDoubleDisplayValue;\n    }\n    model.computing = 1;\n    let val = model.value.slice(0);\n    let renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.DISPLAY) {\n        model.computedDoubleDisplayValue[0] = val[0];\n        model.computedDoubleDisplayValue[1] = val[1];\n        if (model.referenceCoordinate) {\n          const refValue = model.referenceCoordinate.getComputedDoubleDisplayValue();\n          model.computedDoubleDisplayValue[0] += refValue[0];\n          model.computedDoubleDisplayValue[1] += refValue[1];\n        }\n      } else {\n        model.computedDoubleDisplayValue[0] = Number.MAX_VALUE;\n        model.computedDoubleDisplayValue[1] = Number.MAX_VALUE;\n        vtkErrorMacro('Request for coordinate transformation without required viewport');\n      }\n      return model.computedDoubleDisplayValue;\n    }\n    let view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    const dims = view.getViewportSize(renderer);\n    const aspect = dims[0] / dims[1];\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        {\n          if (model.referenceCoordinate) {\n            const refValue = model.referenceCoordinate.getComputedWorldValue(renderer);\n            val[0] += refValue[0];\n            val[1] += refValue[1];\n            val[2] += refValue[2];\n          }\n          val = renderer.worldToView(val[0], val[1], val[2]);\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.VIEW:\n        {\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.PROJECTION:\n        {\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.NORMALIZED_VIEWPORT:\n        {\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          if (model.referenceCoordinate) {\n            const refValue = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n            val[0] += refValue[0];\n            val[1] += refValue[1];\n          }\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.VIEWPORT:\n        {\n          if (model.referenceCoordinate) {\n            const refValue = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n            val[0] += refValue[0];\n            val[1] += refValue[1];\n          }\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n        break;\n      case Coordinate.USERDEFINED:\n        val = model.value.slice(0);\n        break;\n    }\n\n    // if we have a reference coordinate and we haven't handled it yet\n    if (model.referenceCoordinate && (model.coordinateSystem === Coordinate.DISPLAY || model.coordinateSystem === Coordinate.NORMALIZED_DISPLAY)) {\n      const refValue = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n      val[0] += refValue[0];\n      val[1] += refValue[1];\n    }\n    model.computedDoubleDisplayValue[0] = val[0];\n    model.computedDoubleDisplayValue[1] = val[1];\n    model.computing = 0;\n    return model.computedDoubleDisplayValue;\n  };\n  publicAPI.getComputedValue = ren => {\n    let renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        return publicAPI.getComputedWorldValue(renderer);\n      case Coordinate.VIEW:\n      case Coordinate.NORMALIZED_VIEWPORT:\n      case Coordinate.VIEWPORT:\n        {\n          const val = publicAPI.getComputedViewportValue(renderer);\n          model.computedWorldValue[0] = val[0];\n          model.computedWorldValue[1] = val[1];\n          break;\n        }\n      case Coordinate.NORMALIZED_DISPLAY:\n      case Coordinate.DISPLAY:\n        {\n          const val = model.getComputedDisplayValue(renderer);\n          model.computedWorldValue[0] = val[0];\n          model.computedWorldValue[1] = val[1];\n          break;\n        }\n    }\n    return model.computedWorldValue;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  coordinateSystem: Coordinate.WORLD,\n  value: [0.0, 0.0, 0.0],\n  renderer: null,\n  referenceCoordinate: null,\n  computing: 0,\n  computedWorldValue: [0.0, 0.0, 0.0],\n  computedDoubleDisplayValue: [0.0, 0.0]\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n\n  // Build VTK API\n  macro.set(publicAPI, model, ['property']);\n  macro.get(publicAPI, model, ['value']);\n  macro.setGet(publicAPI, model, ['coordinateSystem', 'referenceCoordinate', 'renderer']);\n  macro.getArray(publicAPI, model, ['value'], 3);\n\n  // Object methods\n  vtkCoordinate(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkCoordinate');\n\n// ----------------------------------------------------------------------------\n\nvar vtkCoordinate$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkCoordinate$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["Coordinate"]
}

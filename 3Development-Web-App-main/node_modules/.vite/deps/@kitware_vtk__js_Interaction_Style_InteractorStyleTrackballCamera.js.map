{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/Core/InteractorObserver.js", "../../@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js", "../../@kitware/vtk.js/Rendering/Core/InteractorStyle.js", "../../@kitware/vtk.js/Interaction/Style/InteractorStyleTrackballCamera.js"],
  "sourcesContent": ["import { m as macro } from '../../macros2.js';\nimport vtkRenderWindowInteractor from './RenderWindowInteractor.js';\n\nconst {\n  vtkErrorMacro,\n  VOID\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------\n// Description:\n// Transform from world to display coordinates.\nfunction computeWorldToDisplay(renderer, x, y, z) {\n  const view = renderer.getRenderWindow().getViews()[0];\n  return view.worldToDisplay(x, y, z, renderer);\n}\n\n//----------------------------------------------------------------------------\n// Description:\n// Transform from display to world coordinates.\nfunction computeDisplayToWorld(renderer, x, y, z) {\n  const view = renderer.getRenderWindow().getViews()[0];\n  return view.displayToWorld(x, y, z, renderer);\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\nconst STATIC = {\n  computeWorldToDisplay,\n  computeDisplayToWorld\n};\n\n// ----------------------------------------------------------------------------\n// vtkInteractorObserver methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorObserver(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorObserver');\n  const superClass = {\n    ...publicAPI\n  };\n\n  //----------------------------------------------------------------------------\n  function unsubscribeFromEvents() {\n    while (model.subscribedEvents.length) {\n      model.subscribedEvents.pop().unsubscribe();\n    }\n  }\n\n  //----------------------------------------------------------------------------\n  // Check what events we can handle and register callbacks\n  function subscribeToEvents() {\n    vtkRenderWindowInteractor.handledEvents.forEach(eventName => {\n      if (publicAPI[`handle${eventName}`]) {\n        model.subscribedEvents.push(model._interactor[`on${eventName}`](callData => {\n          if (model.processEvents) {\n            return publicAPI[`handle${eventName}`](callData);\n          }\n          return VOID;\n        }, model.priority));\n      }\n    });\n  }\n\n  //----------------------------------------------------------------------------\n  // Public API methods\n  //----------------------------------------------------------------------------\n  publicAPI.setInteractor = i => {\n    if (i === model._interactor) {\n      return;\n    }\n    unsubscribeFromEvents();\n    model._interactor = i;\n    if (i && model.enabled) {\n      subscribeToEvents();\n    }\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setEnabled = enable => {\n    if (enable === model.enabled) {\n      return;\n    }\n    unsubscribeFromEvents();\n    if (enable) {\n      if (model._interactor) {\n        subscribeToEvents();\n      } else {\n        vtkErrorMacro(`\n          The interactor must be set before subscribing to events\n        `);\n      }\n    }\n    model.enabled = enable;\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Description:\n  // Transform from display to world coordinates.\n  publicAPI.computeDisplayToWorld = (renderer, x, y, z) => {\n    if (!renderer) {\n      return null;\n    }\n    return model._interactor.getView().displayToWorld(x, y, z, renderer);\n  };\n\n  //----------------------------------------------------------------------------\n  // Description:\n  // Transform from world to display coordinates.\n  publicAPI.computeWorldToDisplay = (renderer, x, y, z) => {\n    if (!renderer) {\n      return null;\n    }\n    return model._interactor.getView().worldToDisplay(x, y, z, renderer);\n  };\n\n  //----------------------------------------------------------------------------\n\n  publicAPI.setPriority = priority => {\n    const modified = superClass.setPriority(priority);\n    if (modified && model._interactor) {\n      unsubscribeFromEvents();\n      subscribeToEvents();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  enabled: true,\n  // _interactor: null,\n  priority: 0.0,\n  processEvents: true,\n  subscribedEvents: []\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.event(publicAPI, model, 'InteractionEvent');\n  macro.event(publicAPI, model, 'StartInteractionEvent');\n  macro.event(publicAPI, model, 'EndInteractionEvent');\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['_interactor', 'enabled']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['priority', 'processEvents']);\n  macro.moveToProtected(publicAPI, model, ['interactor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkInteractorObserver(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorObserver');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorObserver$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkInteractorObserver$1 as default, extend, newInstance };\n", "const States = {\n  IS_START: 0,\n  IS_NONE: 0,\n  IS_ROTATE: 1,\n  IS_PAN: 2,\n  IS_SPIN: 3,\n  IS_DOLLY: 4,\n  IS_CAMERA_POSE: 11,\n  IS_WINDOW_LEVEL: 1024,\n  IS_SLICE: 1025\n};\nvar vtkInteractorStyleConstants = {\n  States\n};\n\nexport { States, vtkInteractorStyleConstants as default };\n", "import { m as macro } from '../../macros2.js';\nimport vtkInteractorObserver from './InteractorObserver.js';\nimport vtkInteractorStyleConstants from './InteractorStyle/Constants.js';\n\nconst {\n  States\n} = vtkInteractorStyleConstants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// Add module-level functions or api that you want to expose statically via\n// the next section...\n\nconst stateNames = {\n  Rotate: States.IS_ROTATE,\n  Pan: States.IS_PAN,\n  Spin: States.IS_SPIN,\n  Dolly: States.IS_DOLLY,\n  CameraPose: States.IS_CAMERA_POSE,\n  WindowLevel: States.IS_WINDOW_LEVEL,\n  Slice: States.IS_SLICE\n};\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyle methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyle(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyle');\n\n  // Public API methods\n  // create bunch of Start/EndState methods\n  Object.keys(stateNames).forEach(key => {\n    macro.event(publicAPI, model, `Start${key}Event`);\n    publicAPI[`start${key}`] = () => {\n      if (model.state !== States.IS_NONE) {\n        return;\n      }\n      model.state = stateNames[key];\n      model._interactor.requestAnimation(publicAPI);\n      publicAPI.invokeStartInteractionEvent({\n        type: 'StartInteractionEvent'\n      });\n      publicAPI[`invokeStart${key}Event`]({\n        type: `Start${key}Event`\n      });\n    };\n    macro.event(publicAPI, model, `End${key}Event`);\n    publicAPI[`end${key}`] = () => {\n      if (model.state !== stateNames[key]) {\n        return;\n      }\n      model.state = States.IS_NONE;\n      model._interactor.cancelAnimation(publicAPI);\n      publicAPI.invokeEndInteractionEvent({\n        type: 'EndInteractionEvent'\n      });\n      publicAPI[`invokeEnd${key}Event`]({\n        type: `End${key}Event`\n      });\n      model._interactor.render();\n    };\n  });\n  model.getRenderer = callData => model.focusedRenderer || callData.pokedRenderer;\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleKeyPress = callData => {\n    const rwi = model._interactor;\n    let ac = null;\n    switch (callData.key) {\n      case 'r':\n      case 'R':\n        model.getRenderer(callData).resetCamera();\n        rwi.render();\n        break;\n      case 'w':\n      case 'W':\n        ac = model.getRenderer(callData).getActors();\n        ac.forEach(anActor => {\n          const prop = anActor.getProperty();\n          if (prop.setRepresentationToWireframe) {\n            prop.setRepresentationToWireframe();\n          }\n        });\n        rwi.render();\n        break;\n      case 's':\n      case 'S':\n        ac = model.getRenderer(callData).getActors();\n        ac.forEach(anActor => {\n          const prop = anActor.getProperty();\n          if (prop.setRepresentationToSurface) {\n            prop.setRepresentationToSurface();\n          }\n        });\n        rwi.render();\n        break;\n      case 'v':\n      case 'V':\n        ac = model.getRenderer(callData).getActors();\n        ac.forEach(anActor => {\n          const prop = anActor.getProperty();\n          if (prop.setRepresentationToPoints) {\n            prop.setRepresentationToPoints();\n          }\n        });\n        rwi.render();\n        break;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  state: States.IS_NONE,\n  handleObservers: 1,\n  autoAdjustCameraClippingRange: 1\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkInteractorObserver.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['focusedRenderer']);\n\n  // Object specific methods\n  vtkInteractorStyle(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyle');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyle$1 = {\n  newInstance,\n  extend,\n  ...vtkInteractorStyleConstants\n};\n\nexport { vtkInteractorStyle$1 as default, extend, newInstance };\n", "import { m as macro } from '../../macros2.js';\nimport vtkInteractorStyle from '../../Rendering/Core/InteractorStyle.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport { A as degreesFromRadians } from '../../Common/Core/Math/index.js';\nimport { Device, Input } from '../../Rendering/Core/RenderWindowInteractor/Constants.js';\n\nconst {\n  States\n} = vtkInteractorStyleConstants;\n\n/* eslint-disable no-lonely-if */\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyleTrackballCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyleTrackballCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyleTrackballCamera');\n\n  // Public API methods\n  publicAPI.handleMouseMove = callData => {\n    const pos = callData.position;\n    const renderer = model.getRenderer(callData);\n    switch (model.state) {\n      case States.IS_ROTATE:\n        publicAPI.handleMouseRotate(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_PAN:\n        publicAPI.handleMousePan(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_DOLLY:\n        publicAPI.handleMouseDolly(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_SPIN:\n        publicAPI.handleMouseSpin(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n    }\n    model.previousPosition = pos;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleButton3D = ed => {\n    if (ed && ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad)) {\n      publicAPI.startCameraPose();\n      return;\n    }\n    if (ed && !ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad) && model.state === States.IS_CAMERA_POSE) {\n      publicAPI.endCameraPose();\n      // return;\n    }\n  };\n\n  publicAPI.handleMove3D = ed => {\n    switch (model.state) {\n      case States.IS_CAMERA_POSE:\n        publicAPI.updateCameraPose(ed);\n        break;\n    }\n  };\n  publicAPI.updateCameraPose = ed => {\n    // move the world in the direction of the\n    // controller\n    const camera = model.getRenderer(ed).getActiveCamera();\n    const oldTrans = camera.getPhysicalTranslation();\n\n    // look at the y axis to determine how fast / what direction to move\n    const speed = 0.5; // ed.gamepad.axes[1];\n\n    // 0.05 meters / frame movement\n    const pscale = speed * 0.05 * camera.getPhysicalScale();\n\n    // convert orientation to world coordinate direction\n    const dir = camera.physicalOrientationToWorldDirection([ed.orientation.x, ed.orientation.y, ed.orientation.z, ed.orientation.w]);\n    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleLeftButtonPress = callData => {\n    const pos = callData.position;\n    model.previousPosition = pos;\n    if (callData.shiftKey) {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startDolly();\n      } else {\n        publicAPI.startPan();\n      }\n    } else {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startSpin();\n      } else {\n        publicAPI.startRotate();\n      }\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleLeftButtonRelease = () => {\n    switch (model.state) {\n      case States.IS_DOLLY:\n        publicAPI.endDolly();\n        break;\n      case States.IS_PAN:\n        publicAPI.endPan();\n        break;\n      case States.IS_SPIN:\n        publicAPI.endSpin();\n        break;\n      case States.IS_ROTATE:\n        publicAPI.endRotate();\n        break;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartMouseWheel = () => {\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndMouseWheel = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPinch = callData => {\n    model.previousScale = callData.scale;\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPinch = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartRotate = callData => {\n    model.previousRotation = callData.rotation;\n    publicAPI.startRotate();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndRotate = () => {\n    publicAPI.endRotate();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPan = callData => {\n    model.previousTranslation = callData.translation;\n    publicAPI.startPan();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPan = () => {\n    publicAPI.endPan();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePinch = callData => {\n    publicAPI.dollyByFactor(model.getRenderer(callData), callData.scale / model.previousScale);\n    model.previousScale = callData.scale;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePan = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(model.getRenderer(callData), viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const trans = callData.translation;\n    const lastTrans = model.previousTranslation;\n    const newPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0], viewFocus[1], focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      model.getRenderer(callData).updateLightsGeometryToFollowCamera();\n    }\n    camera.orthogonalizeViewUp();\n    model.previousTranslation = callData.translation;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleRotate = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n    camera.roll(callData.rotation - model.previousRotation);\n    camera.orthogonalizeViewUp();\n    model.previousRotation = callData.rotation;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseRotate = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const dx = position.x - model.previousPosition.x;\n    const dy = position.y - model.previousPosition.y;\n    const size = rwi.getView().getViewportSize(renderer);\n    let deltaElevation = -0.1;\n    let deltaAzimuth = -0.1;\n    if (size[0] && size[1]) {\n      deltaElevation = -20.0 / size[1];\n      deltaAzimuth = -20.0 / size[0];\n    }\n    const rxf = dx * deltaAzimuth * model.motionFactor;\n    const ryf = dy * deltaElevation * model.motionFactor;\n    const camera = renderer.getActiveCamera();\n    if (!Number.isNaN(rxf) && !Number.isNaN(ryf)) {\n      camera.azimuth(rxf);\n      camera.elevation(ryf);\n      camera.orthogonalizeViewUp();\n    }\n    if (model.autoAdjustCameraClippingRange) {\n      renderer.resetCameraClippingRange();\n    }\n    if (rwi.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseSpin = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const camera = renderer.getActiveCamera();\n    const center = rwi.getView().getViewportCenter(renderer);\n    const oldAngle = degreesFromRadians(Math.atan2(model.previousPosition.y - center[1], model.previousPosition.x - center[0]));\n    const newAngle = degreesFromRadians(Math.atan2(position.y - center[1], position.x - center[0])) - oldAngle;\n    if (!Number.isNaN(newAngle)) {\n      camera.roll(newAngle);\n      camera.orthogonalizeViewUp();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMousePan = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const newPickPoint = publicAPI.computeDisplayToWorld(renderer, position.x, position.y, focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(renderer, model.previousPosition.x, model.previousPosition.y, focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseDolly = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const dy = position.y - model.previousPosition.y;\n    const rwi = model._interactor;\n    const center = rwi.getView().getViewportCenter(renderer);\n    const dyf = model.motionFactor * dy / center[1];\n    publicAPI.dollyByFactor(renderer, 1.1 ** dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseWheel = callData => {\n    const dyf = 1 - callData.spinY / model.zoomFactor;\n    publicAPI.dollyByFactor(model.getRenderer(callData), dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.dollyByFactor = (renderer, factor) => {\n    if (Number.isNaN(factor)) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n    if (camera.getParallelProjection()) {\n      camera.setParallelScale(camera.getParallelScale() / factor);\n    } else {\n      camera.dolly(factor);\n      if (model.autoAdjustCameraClippingRange) {\n        renderer.resetCameraClippingRange();\n      }\n    }\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  motionFactor: 10.0,\n  zoomFactor: 10.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkInteractorStyle.extend(publicAPI, model, initialValues);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['motionFactor', 'zoomFactor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkInteractorStyleTrackballCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyleTrackballCamera');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyleTrackballCamera$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkInteractorStyleTrackballCamera$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["States", "DEFAULT_VALUES", "extend", "newInstance", "States", "DEFAULT_VALUES", "extend", "newInstance"]
}

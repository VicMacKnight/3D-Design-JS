import {
  vtkPolyData$1
} from "./chunk-ASK2H7AW.js";
import "./chunk-4D44TFRT.js";
import "./chunk-CEGBQTJE.js";
import "./chunk-MIWBGA5F.js";
import "./chunk-PPHUOPMK.js";
import "./chunk-OX3JD63S.js";
import {
  norm,
  subtract
} from "./chunk-TIDT2POU.js";
import {
  macro
} from "./chunk-RF5CWC6R.js";

// node_modules/@kitware/vtk.js/Filters/Sources/LineSource.js
var {
  vtkWarningMacro
} = macro;
function vtkLineSource(publicAPI, model) {
  model.classHierarchy.push("vtkLineSource");
  publicAPI.requestData = (inData, outData) => {
    if (model.deleted) {
      return;
    }
    const dataset = outData[0];
    const pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;
    const pd = vtkPolyData$1.newInstance();
    const v21 = [];
    subtract(model.point2, model.point1, v21);
    if (norm(v21) <= 0) {
      vtkWarningMacro("Zero-length line definition");
      return;
    }
    const res = model.resolution;
    const numPts = res + 1;
    const points = macro.newTypedArray(pointDataType, numPts * 3);
    pd.getPoints().setData(points, 3);
    const lines = new Uint32Array(numPts + 1);
    pd.getLines().setData(lines, 1);
    let idx = 0;
    let t = 0;
    for (let i = 0; i < res + 1; i++) {
      t = i / res;
      points[idx * 3] = model.point1[0] + t * v21[0];
      points[idx * 3 + 1] = model.point1[1] + t * v21[1];
      points[idx * 3 + 2] = model.point1[2] + t * v21[2];
      idx++;
    }
    idx = 0;
    lines[0] = numPts;
    for (let i = 0; i < numPts; i++) {
      lines[i + 1] = i;
    }
    outData[0] = pd;
  };
}
var DEFAULT_VALUES = {
  resolution: 10,
  point1: [-1, 0, 0],
  point2: [1, 0, 0],
  pointType: "Float64Array"
};
function extend(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["resolution"]);
  macro.setGetArray(publicAPI, model, ["point1", "point2"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkLineSource(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkLineSource");
var vtkLineSource$1 = {
  newInstance,
  extend
};
export {
  vtkLineSource$1 as default,
  extend,
  newInstance
};
//# sourceMappingURL=@kitware_vtk__js_Filters_Sources_LineSource.js.map

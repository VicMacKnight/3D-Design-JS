{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Filters/Sources/SphereSource.js"],
  "sourcesContent": ["import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\n\n// ----------------------------------------------------------------------------\n// vtkSphereSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSphereSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSphereSource');\n  publicAPI.requestData = (inData, outData) => {\n    if (model.deleted) {\n      return;\n    }\n    let dataset = outData[0];\n    const pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;\n    dataset = vtkPolyData.newInstance();\n\n    // ----------------------------------------------------------------------\n    let numPoles = 0;\n\n    // Check data, determine increments, and convert to radians\n    let {\n      thetaResolution\n    } = model;\n    let startTheta = model.startTheta < model.endTheta ? model.startTheta : model.endTheta;\n    startTheta *= Math.PI / 180.0;\n    let endTheta = model.endTheta > model.startTheta ? model.endTheta : model.startTheta;\n    endTheta *= Math.PI / 180.0;\n    let startPhi = model.startPhi < model.endPhi ? model.startPhi : model.endPhi;\n    startPhi *= Math.PI / 180.0;\n    let endPhi = model.endPhi > model.startPhi ? model.endPhi : model.startPhi;\n    endPhi *= Math.PI / 180.0;\n    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {\n      ++thetaResolution;\n    }\n    const deltaTheta = (endTheta - startTheta) / model.thetaResolution;\n    const jStart = model.startPhi <= 0.0 ? 1 : 0;\n    const jEnd = model.phiResolution + (model.endPhi >= 180.0 ? -1 : 0);\n    const numPts = model.phiResolution * thetaResolution + 2;\n    const numPolys = model.phiResolution * 2 * model.thetaResolution;\n\n    // Points\n    let pointIdx = 0;\n    let points = macro.newTypedArray(pointDataType, numPts * 3);\n\n    // Normals\n    let normals = new Float32Array(numPts * 3);\n\n    // Cells\n    let cellLocation = 0;\n    let polys = new Uint32Array(numPolys * 5);\n\n    // Create north pole if needed\n    if (model.startPhi <= 0.0) {\n      points[pointIdx * 3 + 0] = model.center[0];\n      points[pointIdx * 3 + 1] = model.center[1];\n      points[pointIdx * 3 + 2] = model.center[2] + model.radius;\n      normals[pointIdx * 3 + 0] = 0;\n      normals[pointIdx * 3 + 1] = 0;\n      normals[pointIdx * 3 + 2] = 1;\n      pointIdx++;\n      numPoles++;\n    }\n\n    // Create south pole if needed\n    if (model.endPhi >= 180.0) {\n      points[pointIdx * 3 + 0] = model.center[0];\n      points[pointIdx * 3 + 1] = model.center[1];\n      points[pointIdx * 3 + 2] = model.center[2] - model.radius;\n      normals[pointIdx * 3 + 0] = 0;\n      normals[pointIdx * 3 + 1] = 0;\n      normals[pointIdx * 3 + 2] = -1;\n      pointIdx++;\n      numPoles++;\n    }\n    const phiResolution = model.phiResolution - numPoles;\n    const deltaPhi = (endPhi - startPhi) / (model.phiResolution - 1);\n\n    // Create intermediate points\n    for (let i = 0; i < thetaResolution; i++) {\n      const theta = startTheta + i * deltaTheta;\n      for (let j = jStart; j < jEnd; j++) {\n        const phi = startPhi + j * deltaPhi;\n        const radius = model.radius * Math.sin(phi);\n        normals[pointIdx * 3 + 0] = radius * Math.cos(theta);\n        normals[pointIdx * 3 + 1] = radius * Math.sin(theta);\n        normals[pointIdx * 3 + 2] = model.radius * Math.cos(phi);\n        points[pointIdx * 3 + 0] = normals[pointIdx * 3 + 0] + model.center[0];\n        points[pointIdx * 3 + 1] = normals[pointIdx * 3 + 1] + model.center[1];\n        points[pointIdx * 3 + 2] = normals[pointIdx * 3 + 2] + model.center[2];\n        let norm = Math.sqrt(normals[pointIdx * 3 + 0] * normals[pointIdx * 3 + 0] + normals[pointIdx * 3 + 1] * normals[pointIdx * 3 + 1] + normals[pointIdx * 3 + 2] * normals[pointIdx * 3 + 2]);\n        norm = norm === 0 ? 1 : norm;\n        normals[pointIdx * 3 + 0] /= norm;\n        normals[pointIdx * 3 + 1] /= norm;\n        normals[pointIdx * 3 + 2] /= norm;\n        pointIdx++;\n      }\n    }\n\n    // Generate mesh connectivity\n    const base = phiResolution * thetaResolution;\n    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {\n      --thetaResolution;\n    }\n\n    // around north pole\n    if (model.startPhi <= 0.0) {\n      for (let i = 0; i < thetaResolution; i++) {\n        polys[cellLocation++] = 3;\n        polys[cellLocation++] = phiResolution * i + numPoles;\n        polys[cellLocation++] = phiResolution * (i + 1) % base + numPoles;\n        polys[cellLocation++] = 0;\n      }\n    }\n\n    // around south pole\n    if (model.endPhi >= 180.0) {\n      const numOffset = phiResolution - 1 + numPoles;\n      for (let i = 0; i < thetaResolution; i++) {\n        polys[cellLocation++] = 3;\n        polys[cellLocation++] = phiResolution * i + numOffset;\n        polys[cellLocation++] = numPoles - 1;\n        polys[cellLocation++] = phiResolution * (i + 1) % base + numOffset;\n      }\n    }\n\n    // bands in-between poles\n    for (let i = 0; i < thetaResolution; i++) {\n      for (let j = 0; j < phiResolution - 1; j++) {\n        const a = phiResolution * i + j + numPoles;\n        const b = a + 1;\n        const c = (phiResolution * (i + 1) + j) % base + numPoles + 1;\n        if (!model.latLongTessellation) {\n          polys[cellLocation++] = 3;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = b;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = 3;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = c - 1;\n        } else {\n          polys[cellLocation++] = 4;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = b;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = c - 1;\n        }\n      }\n    }\n\n    // Squeeze\n    points = points.subarray(0, pointIdx * 3);\n    dataset.getPoints().setData(points, 3);\n    normals = normals.subarray(0, pointIdx * 3);\n    const normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    dataset.getPointData().setNormals(normalArray);\n    polys = polys.subarray(0, cellLocation);\n    dataset.getPolys().setData(polys, 1);\n\n    // Update output\n    outData[0] = dataset;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  radius: 0.5,\n  latLongTessellation: false,\n  thetaResolution: 8,\n  startTheta: 0.0,\n  endTheta: 360.0,\n  phiResolution: 8,\n  startPhi: 0.0,\n  endPhi: 180.0,\n  center: [0, 0, 0],\n  pointType: 'Float64Array'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['radius', 'latLongTessellation', 'thetaResolution', 'startTheta', 'endTheta', 'phiResolution', 'startPhi', 'endPhi']);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkSphereSource(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkSphereSource');\n\n// ----------------------------------------------------------------------------\n\nvar vtkSphereSource$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkSphereSource$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": []
}

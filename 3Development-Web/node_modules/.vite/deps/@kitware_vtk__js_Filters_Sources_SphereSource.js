import {
  vtkPolyData$1
} from "./chunk-ASK2H7AW.js";
import "./chunk-4D44TFRT.js";
import "./chunk-CEGBQTJE.js";
import {
  vtkDataArray$1
} from "./chunk-MIWBGA5F.js";
import "./chunk-PPHUOPMK.js";
import "./chunk-OX3JD63S.js";
import "./chunk-TIDT2POU.js";
import {
  macro
} from "./chunk-RF5CWC6R.js";

// node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js
function vtkSphereSource(publicAPI, model) {
  model.classHierarchy.push("vtkSphereSource");
  publicAPI.requestData = (inData, outData) => {
    if (model.deleted) {
      return;
    }
    let dataset = outData[0];
    const pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;
    dataset = vtkPolyData$1.newInstance();
    let numPoles = 0;
    let {
      thetaResolution
    } = model;
    let startTheta = model.startTheta < model.endTheta ? model.startTheta : model.endTheta;
    startTheta *= Math.PI / 180;
    let endTheta = model.endTheta > model.startTheta ? model.endTheta : model.startTheta;
    endTheta *= Math.PI / 180;
    let startPhi = model.startPhi < model.endPhi ? model.startPhi : model.endPhi;
    startPhi *= Math.PI / 180;
    let endPhi = model.endPhi > model.startPhi ? model.endPhi : model.startPhi;
    endPhi *= Math.PI / 180;
    if (Math.abs(startTheta - endTheta) < 2 * Math.PI) {
      ++thetaResolution;
    }
    const deltaTheta = (endTheta - startTheta) / model.thetaResolution;
    const jStart = model.startPhi <= 0 ? 1 : 0;
    const jEnd = model.phiResolution + (model.endPhi >= 180 ? -1 : 0);
    const numPts = model.phiResolution * thetaResolution + 2;
    const numPolys = model.phiResolution * 2 * model.thetaResolution;
    let pointIdx = 0;
    let points = macro.newTypedArray(pointDataType, numPts * 3);
    let normals = new Float32Array(numPts * 3);
    let cellLocation = 0;
    let polys = new Uint32Array(numPolys * 5);
    if (model.startPhi <= 0) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] + model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = 1;
      pointIdx++;
      numPoles++;
    }
    if (model.endPhi >= 180) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] - model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = -1;
      pointIdx++;
      numPoles++;
    }
    const phiResolution = model.phiResolution - numPoles;
    const deltaPhi = (endPhi - startPhi) / (model.phiResolution - 1);
    for (let i = 0; i < thetaResolution; i++) {
      const theta = startTheta + i * deltaTheta;
      for (let j = jStart; j < jEnd; j++) {
        const phi = startPhi + j * deltaPhi;
        const radius = model.radius * Math.sin(phi);
        normals[pointIdx * 3 + 0] = radius * Math.cos(theta);
        normals[pointIdx * 3 + 1] = radius * Math.sin(theta);
        normals[pointIdx * 3 + 2] = model.radius * Math.cos(phi);
        points[pointIdx * 3 + 0] = normals[pointIdx * 3 + 0] + model.center[0];
        points[pointIdx * 3 + 1] = normals[pointIdx * 3 + 1] + model.center[1];
        points[pointIdx * 3 + 2] = normals[pointIdx * 3 + 2] + model.center[2];
        let norm = Math.sqrt(normals[pointIdx * 3 + 0] * normals[pointIdx * 3 + 0] + normals[pointIdx * 3 + 1] * normals[pointIdx * 3 + 1] + normals[pointIdx * 3 + 2] * normals[pointIdx * 3 + 2]);
        norm = norm === 0 ? 1 : norm;
        normals[pointIdx * 3 + 0] /= norm;
        normals[pointIdx * 3 + 1] /= norm;
        normals[pointIdx * 3 + 2] /= norm;
        pointIdx++;
      }
    }
    const base = phiResolution * thetaResolution;
    if (Math.abs(startTheta - endTheta) < 2 * Math.PI) {
      --thetaResolution;
    }
    if (model.startPhi <= 0) {
      for (let i = 0; i < thetaResolution; i++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * i + numPoles;
        polys[cellLocation++] = phiResolution * (i + 1) % base + numPoles;
        polys[cellLocation++] = 0;
      }
    }
    if (model.endPhi >= 180) {
      const numOffset = phiResolution - 1 + numPoles;
      for (let i = 0; i < thetaResolution; i++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * i + numOffset;
        polys[cellLocation++] = numPoles - 1;
        polys[cellLocation++] = phiResolution * (i + 1) % base + numOffset;
      }
    }
    for (let i = 0; i < thetaResolution; i++) {
      for (let j = 0; j < phiResolution - 1; j++) {
        const a = phiResolution * i + j + numPoles;
        const b = a + 1;
        const c = (phiResolution * (i + 1) + j) % base + numPoles + 1;
        if (!model.latLongTessellation) {
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        } else {
          polys[cellLocation++] = 4;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        }
      }
    }
    points = points.subarray(0, pointIdx * 3);
    dataset.getPoints().setData(points, 3);
    normals = normals.subarray(0, pointIdx * 3);
    const normalArray = vtkDataArray$1.newInstance({
      name: "Normals",
      values: normals,
      numberOfComponents: 3
    });
    dataset.getPointData().setNormals(normalArray);
    polys = polys.subarray(0, cellLocation);
    dataset.getPolys().setData(polys, 1);
    outData[0] = dataset;
  };
}
var DEFAULT_VALUES = {
  radius: 0.5,
  latLongTessellation: false,
  thetaResolution: 8,
  startTheta: 0,
  endTheta: 360,
  phiResolution: 8,
  startPhi: 0,
  endPhi: 180,
  center: [0, 0, 0],
  pointType: "Float64Array"
};
function extend(publicAPI, model) {
  let initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["radius", "latLongTessellation", "thetaResolution", "startTheta", "endTheta", "phiResolution", "startPhi", "endPhi"]);
  macro.setGetArray(publicAPI, model, ["center"], 3);
  macro.algo(publicAPI, model, 0, 1);
  vtkSphereSource(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkSphereSource");
var vtkSphereSource$1 = {
  newInstance,
  extend
};
export {
  vtkSphereSource$1 as default,
  extend,
  newInstance
};
//# sourceMappingURL=@kitware_vtk__js_Filters_Sources_SphereSource.js.map

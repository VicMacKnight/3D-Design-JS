{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/BoundingBox.js"],
  "sourcesContent": ["import { d as dot } from '../Core/Math/index.js';\nimport { vec3 } from 'gl-matrix';\nimport vtkPlane from './Plane.js';\n\nconst INIT_BOUNDS = [Number.MAX_VALUE, -Number.MAX_VALUE,\n// X\nNumber.MAX_VALUE, -Number.MAX_VALUE,\n// Y\nNumber.MAX_VALUE, -Number.MAX_VALUE // Z\n];\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction equals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\nfunction isValid(bounds) {\n  return bounds?.length >= 6 && bounds[0] <= bounds[1] && bounds[2] <= bounds[3] && bounds[4] <= bounds[5];\n}\nfunction setBounds(bounds, otherBounds) {\n  bounds[0] = otherBounds[0];\n  bounds[1] = otherBounds[1];\n  bounds[2] = otherBounds[2];\n  bounds[3] = otherBounds[3];\n  bounds[4] = otherBounds[4];\n  bounds[5] = otherBounds[5];\n  return bounds;\n}\nfunction reset(bounds) {\n  return setBounds(bounds, INIT_BOUNDS);\n}\nfunction addPoint(bounds, x, y, z) {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  bounds[0] = xMin < x ? xMin : x;\n  bounds[1] = xMax > x ? xMax : x;\n  bounds[2] = yMin < y ? yMin : y;\n  bounds[3] = yMax > y ? yMax : y;\n  bounds[4] = zMin < z ? zMin : z;\n  bounds[5] = zMax > z ? zMax : z;\n  return bounds;\n}\nfunction addPoints(bounds, points) {\n  if (points.length === 0) {\n    return bounds;\n  }\n  if (Array.isArray(points[0])) {\n    for (let i = 0; i < points.length; ++i) {\n      addPoint(bounds, ...points[i]);\n    }\n  } else {\n    for (let i = 0; i < points.length; i += 3) {\n      addPoint(bounds, ...points.slice(i, i + 3));\n    }\n  }\n  return bounds;\n}\nfunction addBounds(bounds, xMin, xMax, yMin, yMax, zMin, zMax) {\n  const [_xMin, _xMax, _yMin, _yMax, _zMin, _zMax] = bounds;\n  if (zMax === undefined) {\n    bounds[0] = Math.min(xMin[0], _xMin);\n    bounds[1] = Math.max(xMin[1], _xMax);\n    bounds[2] = Math.min(xMin[2], _yMin);\n    bounds[3] = Math.max(xMin[3], _yMax);\n    bounds[4] = Math.min(xMin[4], _zMin);\n    bounds[5] = Math.max(xMin[5], _zMax);\n  } else {\n    bounds[0] = Math.min(xMin, _xMin);\n    bounds[1] = Math.max(xMax, _xMax);\n    bounds[2] = Math.min(yMin, _yMin);\n    bounds[3] = Math.max(yMax, _yMax);\n    bounds[4] = Math.min(zMin, _zMin);\n    bounds[5] = Math.max(zMax, _zMax);\n  }\n  return bounds;\n}\nfunction setMinPoint(bounds, x, y, z) {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  bounds[0] = x;\n  bounds[1] = x > xMax ? x : xMax;\n  bounds[2] = y;\n  bounds[3] = y > yMax ? y : yMax;\n  bounds[4] = z;\n  bounds[5] = z > zMax ? z : zMax;\n  return xMin !== x || yMin !== y || zMin !== z;\n}\nfunction setMaxPoint(bounds, x, y, z) {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  bounds[0] = x < xMin ? x : xMin;\n  bounds[1] = x;\n  bounds[2] = y < yMin ? y : yMin;\n  bounds[3] = y;\n  bounds[4] = z < zMin ? z : zMin;\n  bounds[5] = z;\n  return xMax !== x || yMax !== y || zMax !== z;\n}\nfunction inflate(bounds, delta) {\n  bounds[0] -= delta;\n  bounds[1] += delta;\n  bounds[2] -= delta;\n  bounds[3] += delta;\n  bounds[4] -= delta;\n  bounds[5] += delta;\n  return bounds;\n}\nfunction scale(bounds, sx, sy, sz) {\n  if (!isValid(bounds)) {\n    return false;\n  }\n  if (sx >= 0.0) {\n    bounds[0] *= sx;\n    bounds[1] *= sx;\n  } else {\n    bounds[0] = sx * bounds[1];\n    bounds[1] = sx * bounds[0];\n  }\n  if (sy >= 0.0) {\n    bounds[2] *= sy;\n    bounds[3] *= sy;\n  } else {\n    bounds[2] = sy * bounds[3];\n    bounds[3] = sy * bounds[2];\n  }\n  if (sz >= 0.0) {\n    bounds[4] *= sz;\n    bounds[5] *= sz;\n  } else {\n    bounds[4] = sz * bounds[5];\n    bounds[5] = sz * bounds[4];\n  }\n  return true;\n}\nfunction getCenter(bounds) {\n  return [0.5 * (bounds[0] + bounds[1]), 0.5 * (bounds[2] + bounds[3]), 0.5 * (bounds[4] + bounds[5])];\n}\nfunction scaleAboutCenter(bounds, sx, sy, sz) {\n  if (!isValid(bounds)) {\n    return false;\n  }\n  const center = getCenter(bounds);\n  bounds[0] -= center[0];\n  bounds[1] -= center[0];\n  bounds[2] -= center[1];\n  bounds[3] -= center[1];\n  bounds[4] -= center[2];\n  bounds[5] -= center[2];\n  scale(bounds, sx, sy, sz);\n  bounds[0] += center[0];\n  bounds[1] += center[0];\n  bounds[2] += center[1];\n  bounds[3] += center[1];\n  bounds[4] += center[2];\n  bounds[5] += center[2];\n  return true;\n}\nfunction getLength(bounds, index) {\n  return bounds[index * 2 + 1] - bounds[index * 2];\n}\nfunction getLengths(bounds) {\n  return [getLength(bounds, 0), getLength(bounds, 1), getLength(bounds, 2)];\n}\nfunction getXRange(bounds) {\n  return bounds.slice(0, 2);\n}\nfunction getYRange(bounds) {\n  return bounds.slice(2, 4);\n}\nfunction getZRange(bounds) {\n  return bounds.slice(4, 6);\n}\nfunction getMaxLength(bounds) {\n  const l = getLengths(bounds);\n  if (l[0] > l[1]) {\n    if (l[0] > l[2]) {\n      return l[0];\n    }\n    return l[2];\n  }\n  if (l[1] > l[2]) {\n    return l[1];\n  }\n  return l[2];\n}\nfunction getDiagonalLength(bounds) {\n  if (isValid(bounds)) {\n    const l = getLengths(bounds);\n    return Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]);\n  }\n  return null;\n}\nfunction getMinPoint(bounds) {\n  return [bounds[0], bounds[2], bounds[4]];\n}\nfunction getMaxPoint(bounds) {\n  return [bounds[1], bounds[3], bounds[5]];\n}\nfunction oppositeSign(a, b) {\n  return a <= 0 && b >= 0 || a >= 0 && b <= 0;\n}\nfunction getCorners(bounds, corners) {\n  let count = 0;\n  for (let ix = 0; ix < 2; ix++) {\n    for (let iy = 2; iy < 4; iy++) {\n      for (let iz = 4; iz < 6; iz++) {\n        corners[count++] = [bounds[ix], bounds[iy], bounds[iz]];\n      }\n    }\n  }\n  return corners;\n}\n\n// Computes the two corners with minimal and maximal coordinates\nfunction computeCornerPoints(bounds, point1, point2) {\n  point1[0] = bounds[0];\n  point1[1] = bounds[2];\n  point1[2] = bounds[4];\n  point2[0] = bounds[1];\n  point2[1] = bounds[3];\n  point2[2] = bounds[5];\n  return point1;\n}\nfunction transformBounds(bounds, transform) {\n  let out = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const corners = getCorners(bounds, []);\n  for (let i = 0; i < corners.length; ++i) {\n    vec3.transformMat4(corners[i], corners[i], transform);\n  }\n  reset(out);\n  return addPoints(out, corners);\n}\nfunction computeScale3(bounds) {\n  let scale3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  scale3[0] = 0.5 * (bounds[1] - bounds[0]);\n  scale3[1] = 0.5 * (bounds[3] - bounds[2]);\n  scale3[2] = 0.5 * (bounds[5] - bounds[4]);\n  return scale3;\n}\n\n/**\n * Compute local bounds.\n * Not as fast as vtkPoints.getBounds() if u, v, w form a natural basis.\n * @param {vtkPoints} points\n * @param {array} u first vector\n * @param {array} v second vector\n * @param {array} w third vector\n */\nfunction computeLocalBounds(points, u, v, w) {\n  const bounds = [].concat(INIT_BOUNDS);\n  const pointsData = points.getData();\n  for (let i = 0; i < pointsData.length; i += 3) {\n    const point = [pointsData[i], pointsData[i + 1], pointsData[i + 2]];\n    const du = dot(point, u);\n    bounds[0] = Math.min(du, bounds[0]);\n    bounds[1] = Math.max(du, bounds[1]);\n    const dv = dot(point, v);\n    bounds[2] = Math.min(dv, bounds[2]);\n    bounds[3] = Math.max(dv, bounds[3]);\n    const dw = dot(point, w);\n    bounds[4] = Math.min(dw, bounds[4]);\n    bounds[5] = Math.max(dw, bounds[5]);\n  }\n  return bounds;\n}\n\n// The method returns a non-zero value if the bounding box is hit.\n// Origin[3] starts the ray, dir[3] is the vector components of the ray in the x-y-z\n// directions, coord[3] is the location of hit, and t is the parametric\n// coordinate along line. (Notes: the intersection ray dir[3] is NOT\n// normalized.  Valid intersections will only occur between 0<=t<=1.)\nfunction intersectBox(bounds, origin, dir, coord, tolerance) {\n  let inside = true;\n  const quadrant = [];\n  let whichPlane = 0;\n  const maxT = [];\n  const candidatePlane = [0.0, 0.0, 0.0];\n  const RIGHT = 0;\n  const LEFT = 1;\n  const MIDDLE = 2;\n\n  // First find closest planes\n  for (let i = 0; i < 3; i++) {\n    if (origin[i] < bounds[2 * i]) {\n      quadrant[i] = LEFT;\n      candidatePlane[i] = bounds[2 * i];\n      inside = false;\n    } else if (origin[i] > bounds[2 * i + 1]) {\n      quadrant[i] = RIGHT;\n      candidatePlane[i] = bounds[2 * i + 1];\n      inside = false;\n    } else {\n      quadrant[i] = MIDDLE;\n    }\n  }\n\n  // Check whether origin of ray is inside bbox\n  if (inside) {\n    coord[0] = origin[0];\n    coord[1] = origin[1];\n    coord[2] = origin[2];\n    tolerance[0] = 0;\n    return 1;\n  }\n\n  // Calculate parametric distance to plane\n  for (let i = 0; i < 3; i++) {\n    if (quadrant[i] !== MIDDLE && dir[i] !== 0.0) {\n      maxT[i] = (candidatePlane[i] - origin[i]) / dir[i];\n    } else {\n      maxT[i] = -1.0;\n    }\n  }\n\n  // Find the largest parametric value of intersection\n  for (let i = 0; i < 3; i++) {\n    if (maxT[whichPlane] < maxT[i]) {\n      whichPlane = i;\n    }\n  }\n\n  // Check for value intersection along line\n  if (maxT[whichPlane] > 1.0 || maxT[whichPlane] < 0.0) {\n    return 0;\n  }\n  tolerance[0] = maxT[whichPlane];\n\n  // Intersection point along line is okay. Check bbox.\n  for (let i = 0; i < 3; i++) {\n    if (whichPlane !== i) {\n      coord[i] = origin[i] + maxT[whichPlane] * dir[i];\n      if (coord[i] < bounds[2 * i] || coord[i] > bounds[2 * i + 1]) {\n        return 0;\n      }\n    } else {\n      coord[i] = candidatePlane[i];\n    }\n  }\n  return 1;\n}\n\n// Plane intersection with box\n// The plane is infinite in extent and defined by an origin and normal.The function indicates\n// whether the plane intersects, not the particulars of intersection points and such\n// The function returns non-zero if the plane and box intersect; zero otherwise.\nfunction intersectPlane(bounds, origin, normal) {\n  const p = [];\n  let d = 0;\n  let sign = 1;\n  let firstOne = 1;\n\n  // Evaluate the eight points. If there is a sign change, there is an intersection\n  for (let z = 4; z <= 5; ++z) {\n    p[2] = bounds[z];\n    for (let y = 2; y <= 3; ++y) {\n      p[1] = bounds[y];\n      for (let x = 0; x <= 1; ++x) {\n        p[0] = bounds[x];\n        d = vtkPlane.evaluate(normal, origin, p);\n        if (firstOne) {\n          sign = d >= 0 ? 1 : -1;\n          firstOne = 0;\n        }\n        if (d === 0.0 || sign > 0 && d < 0.0 || sign < 0 && d > 0.0) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0; // no intersection\n}\n\nfunction intersect(bounds, bBounds) {\n  if (!(isValid(bounds) && isValid(bBounds))) {\n    return false;\n  }\n  const newBounds = [0, 0, 0, 0, 0, 0];\n  let intersection;\n  for (let i = 0; i < 3; i++) {\n    intersection = false;\n    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2] = bBounds[i * 2];\n    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2] = bounds[i * 2];\n    }\n    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2 + 1] = bBounds[2 * i + 1];\n    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2 + 1] = bounds[i * 2 + 1];\n    }\n    if (!intersection) {\n      return false;\n    }\n  }\n\n  // OK they did intersect - set the box to be the result\n  bounds[0] = newBounds[0];\n  bounds[1] = newBounds[1];\n  bounds[2] = newBounds[2];\n  bounds[3] = newBounds[3];\n  bounds[4] = newBounds[4];\n  bounds[5] = newBounds[5];\n  return true;\n}\nfunction intersects(bounds, bBounds) {\n  if (!(isValid(bounds) && isValid(bBounds))) {\n    return false;\n  }\n  /* eslint-disable no-continue */\n  for (let i = 0; i < 3; i++) {\n    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {\n      continue;\n    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {\n      continue;\n    }\n    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {\n      continue;\n    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {\n      continue;\n    }\n    return false;\n  }\n  /* eslint-enable no-continue */\n\n  return true;\n}\nfunction containsPoint(bounds, x, y, z) {\n  if (x < bounds[0] || x > bounds[1]) {\n    return false;\n  }\n  if (y < bounds[2] || y > bounds[3]) {\n    return false;\n  }\n  if (z < bounds[4] || z > bounds[5]) {\n    return false;\n  }\n  return true;\n}\nfunction contains(bounds, otherBounds) {\n  // if either box is not valid or they don't intersect\n  if (!intersects(bounds, otherBounds)) {\n    return false;\n  }\n  if (!containsPoint(bounds, ...getMinPoint(otherBounds))) {\n    return false;\n  }\n  if (!containsPoint(bounds, ...getMaxPoint(otherBounds))) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns true if plane intersects bounding box.\n * If so, the box is cut by the plane\n * @param {array} origin\n * @param {array} normal\n */\nfunction cutWithPlane(bounds, origin, normal) {\n  // Index[0..2] represents the order of traversing the corners of a cube\n  // in (x,y,z), (y,x,z) and (z,x,y) ordering, respectively\n  const index = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 4, 5, 2, 3, 6, 7], [0, 2, 4, 6, 1, 3, 5, 7]];\n\n  // stores the signed distance to a plane\n  const d = [0, 0, 0, 0, 0, 0, 0, 0];\n  let idx = 0;\n  for (let ix = 0; ix < 2; ix++) {\n    for (let iy = 2; iy < 4; iy++) {\n      for (let iz = 4; iz < 6; iz++) {\n        const x = [bounds[ix], bounds[iy], bounds[iz]];\n        d[idx++] = vtkPlane.evaluate(normal, origin, x);\n      }\n    }\n  }\n  let dir = 2;\n  while (dir--) {\n    // in each direction, we test if the vertices of two orthogonal faces\n    // are on either side of the plane\n    if (oppositeSign(d[index[dir][0]], d[index[dir][4]]) && oppositeSign(d[index[dir][1]], d[index[dir][5]]) && oppositeSign(d[index[dir][2]], d[index[dir][6]]) && oppositeSign(d[index[dir][3]], d[index[dir][7]])) {\n      break;\n    }\n  }\n  if (dir < 0) {\n    return false;\n  }\n  const sign = Math.sign(normal[dir]);\n  const size = Math.abs((bounds[dir * 2 + 1] - bounds[dir * 2]) * normal[dir]);\n  let t = sign > 0 ? 1 : 0;\n  /* eslint-disable no-continue */\n  for (let i = 0; i < 4; i++) {\n    if (size === 0) {\n      continue; // shouldn't happen\n    }\n\n    const ti = Math.abs(d[index[dir][i]]) / size;\n    if (sign > 0 && ti < t) {\n      t = ti;\n    }\n    if (sign < 0 && ti > t) {\n      t = ti;\n    }\n  }\n  /* eslint-enable no-continue */\n  const bound = (1.0 - t) * bounds[dir * 2] + t * bounds[dir * 2 + 1];\n  if (sign > 0) {\n    bounds[dir * 2] = bound;\n  } else {\n    bounds[dir * 2 + 1] = bound;\n  }\n  return true;\n}\n\n// ----------------------------------------------------------------------------\n// Light Weight class\n// ----------------------------------------------------------------------------\n\nclass BoundingBox {\n  constructor(refBounds) {\n    this.bounds = refBounds;\n    if (!this.bounds) {\n      this.bounds = new Float64Array(INIT_BOUNDS);\n    }\n  }\n  getBounds() {\n    return this.bounds;\n  }\n  equals(otherBounds) {\n    return equals(this.bounds, otherBounds);\n  }\n  isValid() {\n    return isValid(this.bounds);\n  }\n  setBounds(otherBounds) {\n    return setBounds(this.bounds, otherBounds);\n  }\n  reset() {\n    return reset(this.bounds);\n  }\n  addPoint() {\n    for (var _len = arguments.length, xyz = new Array(_len), _key = 0; _key < _len; _key++) {\n      xyz[_key] = arguments[_key];\n    }\n    return addPoint(this.bounds, ...xyz);\n  }\n  addPoints(points) {\n    return addPoints(this.bounds, points);\n  }\n  addBounds(xMin, xMax, yMin, yMax, zMin, zMax) {\n    return addBounds(this.bounds, xMin, xMax, yMin, yMax, zMin, zMax);\n  }\n  setMinPoint(x, y, z) {\n    return setMinPoint(this.bounds, x, y, z);\n  }\n  setMaxPoint(x, y, z) {\n    return setMaxPoint(this.bounds, x, y, z);\n  }\n  inflate(delta) {\n    return inflate(this.bounds, delta);\n  }\n  scale(sx, sy, sz) {\n    return scale(this.bounds, sx, sy, sz);\n  }\n  getCenter() {\n    return getCenter(this.bounds);\n  }\n  getLength(index) {\n    return getLength(this.bounds, index);\n  }\n  getLengths() {\n    return getLengths(this.bounds);\n  }\n  getMaxLength() {\n    return getMaxLength(this.bounds);\n  }\n  getDiagonalLength() {\n    return getDiagonalLength(this.bounds);\n  }\n  getMinPoint() {\n    return getMinPoint(this.bounds);\n  }\n  getMaxPoint() {\n    return getMaxPoint(this.bounds);\n  }\n  getXRange() {\n    return getXRange(this.bounds);\n  }\n  getYRange() {\n    return getYRange(this.bounds);\n  }\n  getZRange() {\n    return getZRange(this.bounds);\n  }\n  getCorners(corners) {\n    return getCorners(this.bounds, corners);\n  }\n  computeCornerPoints(point1, point2) {\n    return computeCornerPoints(this.bounds, point1, point2);\n  }\n  computeLocalBounds(u, v, w) {\n    return computeLocalBounds(this.bounds, u, v, w);\n  }\n  transformBounds(transform) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return transformBounds(this.bounds, transform, out);\n  }\n  computeScale3(scale3) {\n    return computeScale3(this.bounds, scale3);\n  }\n  cutWithPlane(origin, normal) {\n    return cutWithPlane(this.bounds, origin, normal);\n  }\n  intersectBox(origin, dir, coord, tolerance) {\n    return intersectBox(this.bounds, origin, dir, coord, tolerance);\n  }\n  intersectPlane(origin, normal) {\n    return intersectPlane(this.bounds, origin, normal);\n  }\n  intersect(otherBounds) {\n    return intersect(this.bounds, otherBounds);\n  }\n  intersects(otherBounds) {\n    return intersects(this.bounds, otherBounds);\n  }\n  containsPoint(x, y, z) {\n    return containsPoint(this.bounds, x, y, z);\n  }\n  contains(otherBounds) {\n    return intersects(this.bounds, otherBounds);\n  }\n}\nfunction newInstance(initialValues) {\n  const bounds = initialValues && initialValues.bounds;\n  return new BoundingBox(bounds);\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  equals,\n  isValid,\n  setBounds,\n  reset,\n  addPoint,\n  addPoints,\n  addBounds,\n  setMinPoint,\n  setMaxPoint,\n  inflate,\n  scale,\n  scaleAboutCenter,\n  getCenter,\n  getLength,\n  getLengths,\n  getMaxLength,\n  getDiagonalLength,\n  getMinPoint,\n  getMaxPoint,\n  getXRange,\n  getYRange,\n  getZRange,\n  getCorners,\n  computeCornerPoints,\n  computeLocalBounds,\n  transformBounds,\n  computeScale3,\n  cutWithPlane,\n  intersectBox,\n  intersectPlane,\n  intersect,\n  intersects,\n  containsPoint,\n  contains,\n  INIT_BOUNDS\n};\nvar vtkBoundingBox = {\n  newInstance,\n  ...STATIC\n};\n\nexport { STATIC, addBounds, addPoint, addPoints, computeCornerPoints, computeLocalBounds, computeScale3, contains, containsPoint, cutWithPlane, vtkBoundingBox as default, equals, getCenter, getCorners, getDiagonalLength, getLength, getLengths, getMaxLength, getMaxPoint, getMinPoint, getXRange, getYRange, getZRange, inflate, intersect, intersectBox, intersectPlane, intersects, isValid, reset, scale, scaleAboutCenter, setBounds, setMaxPoint, setMinPoint, transformBounds };\n"],
  "mappings": "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",
  "names": []
}

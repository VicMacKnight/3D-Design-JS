{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js", "../../@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js", "../../@kitware/vtk.js/Common/DataModel/DataSetAttributes.js", "../../@kitware/vtk.js/Common/DataModel/DataSet/Constants.js", "../../@kitware/vtk.js/Common/DataModel/DataSet.js"],
  "sourcesContent": ["import vtk from '../../../vtk.js';\nimport { m as macro } from '../../../macros2.js';\nimport vtkDataArray from '../../Core/DataArray.js';\n\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkFieldData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkFieldData(publicAPI, model) {\n  model.classHierarchy.push('vtkFieldData');\n  const superGetState = publicAPI.getState;\n\n  // Decode serialized data if any\n  if (model.arrays) {\n    model.arrays = model.arrays.map(item => ({\n      data: vtk(item.data)\n    }));\n  }\n  publicAPI.initialize = () => {\n    publicAPI.initializeFields();\n    publicAPI.copyAllOn();\n    publicAPI.clearFieldFlags();\n  };\n  publicAPI.initializeFields = () => {\n    model.arrays = [];\n    model.copyFieldFlags = {};\n    publicAPI.modified();\n  };\n  publicAPI.copyStructure = other => {\n    publicAPI.initializeFields();\n    model.copyFieldFlags = other.getCopyFieldFlags().map(x => x); // Deep-copy\n    model.arrays = other.arrays().map(x => ({\n      array: x\n    })); // Deep-copy\n    // TODO: Copy array information objects (once we support information objects)\n  };\n\n  publicAPI.getNumberOfArrays = () => model.arrays.length;\n  publicAPI.getNumberOfActiveArrays = () => model.arrays.length;\n  publicAPI.addArray = arr => {\n    const name = arr.getName();\n    const {\n      array,\n      index\n    } = publicAPI.getArrayWithIndex(name);\n    if (array != null) {\n      model.arrays[index] = {\n        data: arr\n      };\n      return index;\n    }\n    model.arrays = [].concat(model.arrays, {\n      data: arr\n    });\n    return model.arrays.length - 1;\n  };\n  publicAPI.removeAllArrays = () => {\n    model.arrays = [];\n  };\n  publicAPI.removeArray = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return publicAPI.removeArrayByIndex(index);\n  };\n  publicAPI.removeArrayByIndex = arrayIdx => {\n    if (arrayIdx !== -1 && arrayIdx < model.arrays.length) {\n      model.arrays.splice(arrayIdx, 1);\n      // TBD modified() ?\n      return true;\n    }\n    return false;\n  };\n  publicAPI.getArrays = () => model.arrays.map(entry => entry.data);\n  publicAPI.getArray = arraySpec => typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);\n  publicAPI.getArrayByName = arrayName => model.arrays.reduce((a, b, i) => b.data.getName() === arrayName ? b.data : a, null);\n  publicAPI.getArrayWithIndex = arrayName => {\n    const index = model.arrays.findIndex(array => array.data.getName() === arrayName);\n    return {\n      array: index !== -1 ? model.arrays[index].data : null,\n      index\n    };\n  };\n  publicAPI.getArrayByIndex = idx => idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;\n  publicAPI.hasArray = arrayName => publicAPI.getArrayWithIndex(arrayName).index >= 0;\n  publicAPI.getArrayName = idx => {\n    const arr = model.arrays[idx];\n    return arr ? arr.data.getName() : '';\n  };\n  publicAPI.getCopyFieldFlags = () => model.copyFieldFlags;\n  publicAPI.getFlag = arrayName => model.copyFieldFlags[arrayName];\n  publicAPI.passData = function (other) {\n    let fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId < 0 || fromId > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            const tId = toId > -1 ? toId : fromId;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId > -1 && fromId < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId;\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(0, arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in passData');\n        }\n      }\n    });\n  };\n  publicAPI.interpolateData = function (other) {\n    let fromId1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let fromId2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    let toId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    other.getArrays().forEach(arr => {\n      const copyFlag = publicAPI.getFlag(arr.getName());\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        let destArr = publicAPI.getArrayByName(arr.getName());\n        if (!destArr) {\n          if (fromId1 < 0 || fromId2 < 0 || fromId1 > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            const ncomps = arr.getNumberOfComponents();\n            let newSize = arr.getNumberOfValues();\n            // TODO: Is this supposed to happen?\n            const tId = toId > -1 ? toId : fromId1;\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(attrType => {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId1 > -1 && fromId1 < arr.getNumberOfTuples()) {\n            const tId = toId > -1 ? toId : fromId1;\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            vtkWarningMacro('Unexpected case in interpolateData');\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in interpolateData');\n        }\n      }\n    });\n  };\n  publicAPI.copyFieldOn = arrayName => {\n    model.copyFieldFlags[arrayName] = true;\n  };\n  publicAPI.copyFieldOff = arrayName => {\n    model.copyFieldFlags[arrayName] = false;\n  };\n  publicAPI.copyAllOn = () => {\n    if (!model.doCopyAllOn || model.doCopyAllOff) {\n      model.doCopyAllOn = true;\n      model.doCopyAllOff = false;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.copyAllOff = () => {\n    if (model.doCopyAllOn || !model.doCopyAllOff) {\n      model.doCopyAllOn = false;\n      model.doCopyAllOff = true;\n      publicAPI.modified();\n    }\n  };\n  publicAPI.clearFieldFlags = () => {\n    model.copyFieldFlags = {};\n  };\n  publicAPI.deepCopy = other => {\n    model.arrays = other.getArrays().map(arr => {\n      const arrNew = arr.newClone();\n      arrNew.deepCopy(arr);\n      return {\n        data: arrNew\n      };\n    });\n  };\n  publicAPI.copyFlags = other => other.getCopyFieldFlags().map(x => x);\n  // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());\n  publicAPI.reset = () => model.arrays.forEach(entry => entry.data.reset());\n  // TODO: getActualMemorySize\n  publicAPI.getMTime = () => model.arrays.reduce((a, b) => b.data.getMTime() > a ? b.data.getMTime() : a, model.mtime);\n  // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }\n  // TODO: publicAPI.getArrayContainingComponent = (component) => ...\n  publicAPI.getNumberOfComponents = () => model.arrays.reduce((a, b) => a + b.data.getNumberOfComponents(), 0);\n  publicAPI.getNumberOfTuples = () => model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;\n  publicAPI.getState = () => {\n    const result = superGetState();\n    if (result) {\n      result.arrays = model.arrays.map(item => ({\n        data: item.data.getState()\n      }));\n    }\n    return result;\n  };\n}\nconst DEFAULT_VALUES = {\n  arrays: [],\n  copyFieldFlags: [],\n  // fields not to copy\n  doCopyAllOn: true,\n  doCopyAllOff: false\n};\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkFieldData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkFieldData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkFieldData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkFieldData$1 as default, extend, newInstance };\n", "const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n", "import { m as macro } from '../../macros2.js';\nimport vtkFieldData from './DataSetAttributes/FieldData.js';\nimport Constants from './DataSetAttributes/Constants.js';\nimport vtkDataArray from '../Core/DataArray.js';\n\nconst {\n  AttributeTypes,\n  AttributeCopyOperations\n} = Constants;\nconst {\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkDataSetAttributes methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSetAttributes(publicAPI, model) {\n  const attrTypes = ['Scalars', 'Vectors', 'Normals', 'TCoords', 'Tensors', 'GlobalIds', 'PedigreeIds'];\n  function cleanAttributeType(attType) {\n    // Given an integer or string, convert the result to one of the\n    // strings in the \"attrTypes\" array above or null (if\n    // no match is found)\n    let cleanAttType = attrTypes.find(ee => AttributeTypes[ee.toUpperCase()] === attType || typeof attType !== 'number' && ee.toLowerCase() === attType.toLowerCase());\n    if (typeof cleanAttType === 'undefined') {\n      cleanAttType = null;\n    }\n    return cleanAttType;\n  }\n\n  // Set our className\n  model.classHierarchy.push('vtkDataSetAttributes');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.checkNumberOfComponents = x => true; // TODO\n\n  publicAPI.setAttribute = (arr, uncleanAttType) => {\n    const attType = cleanAttributeType(uncleanAttType);\n    if (arr && attType.toUpperCase() === 'PEDIGREEIDS' && !arr.isA('vtkDataArray')) {\n      vtkWarningMacro(`Cannot set attribute ${attType}. The attribute must be a vtkDataArray.`);\n      return -1;\n    }\n    if (arr && !publicAPI.checkNumberOfComponents(arr, attType)) {\n      vtkWarningMacro(`Cannot set attribute ${attType}. Incorrect number of components.`);\n      return -1;\n    }\n    let currentAttribute = model[`active${attType}`];\n    if (currentAttribute >= 0 && currentAttribute < model.arrays.length) {\n      if (model.arrays[currentAttribute] === arr) {\n        return currentAttribute;\n      }\n      // FIXME setting an array actually changes its index\n      publicAPI.removeArrayByIndex(currentAttribute);\n    }\n    if (arr) {\n      currentAttribute = publicAPI.addArray(arr);\n      model[`active${attType}`] = currentAttribute;\n    } else {\n      model[`active${attType}`] = -1;\n    }\n    publicAPI.modified();\n    return model[`active${attType}`];\n  };\n  publicAPI.getAttributes = arr => attrTypes.filter(attrType => publicAPI[`get${attrType}`]() === arr);\n  publicAPI.setActiveAttributeByName = (arrayName, attType) => publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, attType);\n  publicAPI.setActiveAttributeByIndex = (arrayIdx, uncleanAttType) => {\n    const attType = cleanAttributeType(uncleanAttType);\n    if (arrayIdx >= 0 && arrayIdx < model.arrays.length) {\n      if (attType.toUpperCase() !== 'PEDIGREEIDS') {\n        const arr = publicAPI.getArrayByIndex(arrayIdx);\n        if (!arr.isA('vtkDataArray')) {\n          vtkWarningMacro(`Cannot set attribute ${attType}. Only vtkDataArray subclasses can be set as active attributes.`);\n          return -1;\n        }\n        if (!publicAPI.checkNumberOfComponents(arr, attType)) {\n          vtkWarningMacro(`Cannot set attribute ${attType}. Incorrect number of components.`);\n          return -1;\n        }\n      }\n      model[`active${attType}`] = arrayIdx;\n      publicAPI.modified();\n      return arrayIdx;\n    }\n    if (arrayIdx === -1) {\n      model[`active${attType}`] = arrayIdx;\n      publicAPI.modified();\n    }\n    return -1;\n  };\n  publicAPI.getActiveAttribute = attType => {\n    // Given an integer enum value or a string (with random capitalization),\n    // find the matching string in attrTypes.\n    const cleanAttType = cleanAttributeType(attType);\n    return publicAPI[`get${cleanAttType}`]();\n  };\n\n  // Override to allow proper handling of active attributes\n  publicAPI.removeAllArrays = () => {\n    attrTypes.forEach(attType => {\n      model[`active${attType}`] = -1;\n    });\n    superClass.removeAllArrays();\n  };\n\n  // Override to allow proper handling of active attributes\n  publicAPI.removeArrayByIndex = arrayIdx => {\n    if (arrayIdx !== -1) {\n      attrTypes.forEach(attType => {\n        if (arrayIdx === model[`active${attType}`]) {\n          model[`active${attType}`] = -1;\n        } else if (arrayIdx < model[`active${attType}`]) {\n          model[`active${attType}`] -= 1;\n        }\n      });\n    }\n    return superClass.removeArrayByIndex(arrayIdx);\n  };\n  attrTypes.forEach(value => {\n    const activeVal = `active${value}`;\n    publicAPI[`get${value}`] = () => publicAPI.getArrayByIndex(model[activeVal]);\n    publicAPI[`set${value}`] = da => publicAPI.setAttribute(da, value);\n    publicAPI[`setActive${value}`] = arrayName => publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, value);\n    publicAPI[`copy${value}Off`] = () => {\n      const attType = value.toUpperCase();\n      model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = false;\n    };\n    publicAPI[`copy${value}On`] = () => {\n      const attType = value.toUpperCase();\n      model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = true;\n    };\n  });\n  publicAPI.initializeAttributeCopyFlags = () => {\n    // Default to copying all attributes in every circumstance:\n    model.copyAttributeFlags = [];\n    Object.keys(AttributeCopyOperations).filter(op => op !== 'ALLCOPY').forEach(attCopyOp => {\n      model.copyAttributeFlags[AttributeCopyOperations[attCopyOp]] = Object.keys(AttributeTypes).filter(ty => ty !== 'NUM_ATTRIBUTES').reduce((a, b) => {\n        a[AttributeTypes[b]] = true;\n        return a;\n      }, []);\n    });\n    // Override some operations where we don't want to copy:\n    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.GLOBALIDS] = false;\n    model.copyAttributeFlags[AttributeCopyOperations.INTERPOLATE][AttributeTypes.GLOBALIDS] = false;\n    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.PEDIGREEIDS] = false;\n  };\n  publicAPI.initialize = macro.chain(publicAPI.initialize, publicAPI.initializeAttributeCopyFlags);\n\n  // Process dataArrays if any\n  if (model.dataArrays && Object.keys(model.dataArrays).length) {\n    Object.keys(model.dataArrays).forEach(name => {\n      if (!model.dataArrays[name].ref && model.dataArrays[name].type === 'vtkDataArray') {\n        publicAPI.addArray(vtkDataArray.newInstance(model.dataArrays[name]));\n      }\n    });\n  }\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = (other, debug) => {\n    superShallowCopy(other, debug);\n    model.arrays = other.getArrays().map(arr => {\n      const arrNew = arr.newClone();\n      arrNew.shallowCopy(arr, debug);\n      return {\n        data: arrNew\n      };\n    });\n  };\n  publicAPI.initializeAttributeCopyFlags();\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  activeScalars: -1,\n  activeVectors: -1,\n  activeTensors: -1,\n  activeNormals: -1,\n  activeTCoords: -1,\n  activeGlobalIds: -1,\n  activePedigreeIds: -1\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  vtkFieldData.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['activeScalars', 'activeNormals', 'activeTCoords', 'activeVectors', 'activeTensors', 'activeGlobalIds', 'activePedigreeIds']);\n  if (!model.arrays) {\n    model.arrays = {};\n  }\n\n  // Object specific methods\n  vtkDataSetAttributes(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkDataSetAttributes');\n\n// ----------------------------------------------------------------------------\n\nvar vtkDataSetAttributes$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkDataSetAttributes$1 as default, extend, newInstance };\n", "// Specify how data arrays can be used by data objects\nconst FieldDataTypes = {\n  UNIFORM: 0,\n  // data that does not vary over points/cells/etc.\n  DATA_OBJECT_FIELD: 0,\n  // to match VTK\n\n  COORDINATE: 1,\n  // data that specifies the location of each point\n  POINT_DATA: 1,\n  // to match VTK\n\n  POINT: 2,\n  // data defined at each point, but that does not specify the point location\n  POINT_FIELD_DATA: 2,\n  // to match VTK\n\n  CELL: 3,\n  // data defined at each cell, but that does not specify the cell\n  CELL_FIELD_DATA: 3,\n  // to match VTK\n\n  VERTEX: 4,\n  // data defined at each graph vertex, but that does not specify the graph vertex\n  VERTEX_FIELD_DATA: 4,\n  // to match VTK\n\n  EDGE: 5,\n  // data defined at each graph edge, but that does not specify the graph edge\n  EDGE_FIELD_DATA: 5,\n  // to match VTK\n\n  ROW: 6,\n  // data specifying a table row\n  ROW_DATA: 6 // to match VTK\n};\n\nconst FieldAssociations = {\n  FIELD_ASSOCIATION_POINTS: 0,\n  FIELD_ASSOCIATION_CELLS: 1,\n  FIELD_ASSOCIATION_NONE: 2,\n  FIELD_ASSOCIATION_POINTS_THEN_CELLS: 3,\n  FIELD_ASSOCIATION_VERTICES: 4,\n  FIELD_ASSOCIATION_EDGES: 5,\n  FIELD_ASSOCIATION_ROWS: 6,\n  NUMBER_OF_ASSOCIATIONS: 7\n};\nvar Constants = {\n  FieldDataTypes,\n  FieldAssociations\n};\n\nexport { FieldAssociations, FieldDataTypes, Constants as default };\n", "import { m as macro } from '../../macros2.js';\nimport vtk from '../../vtk.js';\nimport vtkDataSetAttributes from './DataSetAttributes.js';\nimport Constants from './DataSet/Constants.js';\n\n// import vtkBoundingBox from '../BoundingBox';\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nconst DATASET_FIELDS = ['pointData', 'cellData', 'fieldData'];\n\n// ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet');\n\n  // Add dataset attributes\n  DATASET_FIELDS.forEach(fieldName => {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n  const superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach(fieldName => {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // pointData: null,\n  // cellData: null,\n  // fieldData: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS);\n\n  // Object specific methods\n  vtkDataSet(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkDataSet');\n\n// ----------------------------------------------------------------------------\n\nvar vtkDataSet$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkDataSet$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["AttributeTypes", "AttributeCopyOperations", "vtkWarningMacro", "DEFAULT_VALUES", "extend", "newInstance", "Constants", "DEFAULT_VALUES", "extend", "newInstance", "Constants"]
}
